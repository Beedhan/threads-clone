// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String?
    username      String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Thread        Thread?   @relation(fields: [threadId], references: [id])
    threadId      String?
    Like          Like[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Threads {
    id     String   @id @default(cuid())
    Thread Thread[]
}

model Thread {
    id          String   @id @default(cuid())
    text        String
    Threads     Threads  @relation(fields: [threadsId], references: [id])
    threadsId   String
    likes       Like[]
    User        User[]
    replies     Thread[] @relation("ReplyToThread")
    inReplyTo   Thread?  @relation("ReplyToThread", fields: [inReplyToId], references: [id])
    inReplyToId String?
}

model Like {
    id       String @id @default(cuid())
    user     User   @relation(fields: [userId], references: [id])
    userId   String
    thread   Thread @relation(fields: [threadId], references: [id])
    threadId String
}
